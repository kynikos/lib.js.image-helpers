'use strict';

// Generated by CoffeeScript 2.5.1
(function () {
  // This file is part of image-helpers
  // Copyright (C) 2018-present Dario Giovannetti <dev@dariogiovannetti.net>
  // Licensed under MIT
  // https://github.com/kynikos/lib.js.image-helpers/blob/master/LICENSE
  var blueimpLoadImage, canvasToBlob, loadImage, path;

  path = require('path');

  blueimpLoadImage = require('blueimp-load-image');

  // https://github.com/blueimp/JavaScript-Canvas-to-Blob
  // This is also a polyfill for <canvas>.toBlob()
  module.exports.dataURLtoBlob = require('blueimp-canvas-to-blob');

  // https://github.com/blueimp/JavaScript-Load-Image
  module.exports.loadImage = loadImage = function loadImage(inputFile, options) {
    return new Promise(function (resolve, reject) {
      return blueimpLoadImage(inputFile, function (img) {
        if (img.type === 'error') {
          return reject(img);
        }
        return resolve(img);
      }, options);
    });
  };

  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob
  module.exports.canvasToBlob = canvasToBlob = function canvasToBlob(canvas, mimeType, qualityArgument) {
    return new Promise(function (resolve, reject) {
      return canvas.toBlob(function (blob) {
        return resolve(blob);
      }, mimeType, qualityArgument);
    });
  };

  // Don't give a default value to makeFileName here
  module.exports.inputImagesToFormData = function (_ref) {
    var inputFile = _ref.inputFile,
        formData = _ref.formData,
        formName = _ref.formName,
        forceExtension = _ref.forceExtension,
        makeFileName = _ref.makeFileName,
        optsLoadImage = _ref.optsLoadImage,
        mimeType = _ref.mimeType,
        qualityArgument = _ref.qualityArgument;

    var baseName, file, fileName, promises;
    // canvasToBlob requires a canvas
    optsLoadImage.canvas = true;
    promises = function () {
      var i, len, ref, results;
      ref = inputFile.files;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        file = ref[i];
        if (makeFileName) {
          fileName = makeFileName(file);
        } else if (forceExtension) {
          baseName = path.basename(file.name, path.extname(file.name));
          fileName = baseName + '.' + forceExtension;
        } else {
          fileName = file.filename;
        }
        results.push(function (fileName) {
          return loadImage(file, optsLoadImage).then(function (canvas) {
            return canvasToBlob(canvas, mimeType, qualityArgument);
          }).then(function (blob) {
            formData.append(formName, blob, fileName);
            return blob;
          });
        }(fileName));
      }
      return results;
    }();
    return Promise.all(promises);
  };
}).call(undefined);